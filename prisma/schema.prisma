
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  automations   Automation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id           String    @id @default(cuid())
  title        String
  content      Json
  plain        String    @default("")
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        File[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  noteId    String?
  note      Note?    @relation(fields: [noteId], references: [id])
  createdAt DateTime @default(now())
}

model Automation {
  id          String   @id @default(cuid())
  name        String
  schedule    String
  active      Boolean  @default(true)
  kind        AutomationKind
  config      Json
  lastRunAt   DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  runs        JobRun[]
}

enum AutomationKind {
  RSS_INGEST
  EMAIL_INGEST
  WEBHOOK_OUT
  DIGEST_SUMMARY
}

model JobRun {
  id           String   @id @default(cuid())
  automationId String
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  status       JobStatus @default(PENDING)
  output       Json?
  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

enum JobStatus {
  PENDING
  OK
  ERROR
}

model NoteEmbedding {
  id        String   @id @default(cuid())
  noteId    String   @unique
  vector    Bytes    // pgvector column created via SQL table
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
